name: Build & Deploy

on:
  push:
    branches: [main]

env:
  REGISTRY: ghcr.io
  REPO_OWNER: ${{ github.repository_owner }}
  IMAGE_BACK: ghcr.io/${{ github.repository_owner }}/dd-backend
  IMAGE_FRONT: ghcr.io/${{ github.repository_owner }}/dd-frontend
  IMAGE_ML: ghcr.io/${{ github.repository_owner }}/dd-ml-service
  SHA: ${{ github.sha }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set lowercase variables
        run: |
          echo "REPO_OWNER_LC=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "IMAGE_BACK=ghcr.io/$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')/dd-backend" >> $GITHUB_ENV
          echo "IMAGE_FRONT=ghcr.io/$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')/dd-frontend" >> $GITHUB_ENV
          echo "IMAGE_ML=ghcr.io/$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')/dd-ml-service" >> $GITHUB_ENV

      - uses: pnpm/action-setup@v3
        with: { version: 10 }

      - uses: actions/setup-node@v4
        with: { node-version: 22, cache: pnpm }

      - run: pnpm install --frozen-lockfile
      - run: pnpm nx affected -t lint,test,build --base=origin/main

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build backend image
        run: |
          docker build -f apps/backend/Dockerfile \
            -t $IMAGE_BACK:$SHA -t $IMAGE_BACK:latest .
          docker push $IMAGE_BACK --all-tags

      - name: Build frontend image
        run: |
          docker build -f apps/frontend/Dockerfile \
            -t $IMAGE_FRONT:$SHA -t $IMAGE_FRONT:latest .
          docker push $IMAGE_FRONT --all-tags

      - name: Build ML service image
        run: |
          docker build -f services/ml-service/Dockerfile \
            -t $IMAGE_ML:$SHA -t $IMAGE_ML:latest .
          docker push $IMAGE_ML --all-tags

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Deploy all services to single server via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            # Set lowercase repo owner
            REPO_OWNER_LC=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')
            
            # Login to container registry
            docker login ghcr.io -u ${{ github.repository_owner }} -p ${{ secrets.GHCR_PAT }}
            
            # Ensure deployment directory exists
            mkdir -p /opt/datadoctor
            
            # Pull all latest images
            echo "Pulling latest container images..."
            docker pull ghcr.io/${REPO_OWNER_LC}/dd-ml-service:latest
            docker pull ghcr.io/${REPO_OWNER_LC}/dd-backend:latest
            docker pull ghcr.io/${REPO_OWNER_LC}/dd-frontend:latest
            
            # Navigate to deployment directory
            cd /opt/datadoctor
            
            # Update docker-compose.yml with correct image names (if template exists)
            if [ -f docker-compose.yml ]; then
              sed -i "s/REPO_OWNER_LC/${REPO_OWNER_LC}/g" docker-compose.yml || true
            fi
            
            # Stop existing containers
            echo "Stopping existing containers..."
            docker compose down || true
            
            # Start all services with dependency ordering
            echo "Starting all services..."
            docker compose up -d --pull=always
            
            # Wait for services to become healthy
            echo "Waiting for services to start..."
            sleep 45
            
            # Check service health and status
            echo "Checking service status..."
            docker compose ps
            
            # Verify individual service health
            echo "Verifying service health..."
            curl -f http://localhost:8000/api/v1/health && echo "‚úÖ ML Service healthy" || echo "‚ùå ML Service not responding"
            curl -f http://localhost:3000/health && echo "‚úÖ Backend healthy" || echo "‚ùå Backend not responding"  
            curl -f http://localhost:80/ && echo "‚úÖ Frontend healthy" || echo "‚ùå Frontend not responding"
            
            echo "üéâ Deployment completed!"
